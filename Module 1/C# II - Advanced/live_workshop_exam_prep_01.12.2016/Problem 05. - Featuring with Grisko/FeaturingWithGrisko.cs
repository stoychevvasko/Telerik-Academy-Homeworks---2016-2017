/*
Problem 5 – Featuring with Grisko

Grisko is a famous Bulgarian singer. As his personal website says “Grisko is the author of almost all modern 
Bulgarian hits” (yeah, sure). Anyway, Grisko has a requirement if you want to do a featuring with him you should 
only use words with no two consecutive equal characters in your rhymes. Let’s imagine that someone somewhere wants 
to sing along with Grisko and let’s imagine that you want to help that poor guy by writing a program.

You are given few letters. Write a program that finds the number of all words with no two consecutive equal 
character that can be generated by reordering the given letters. The generated words should contain all given letters. 
If the given word meets the requirements it should also be considered in the count.

Input
The input data should be read from the console.
On the only input line there will be a single word containing all the letters that you should use for 
generating the words.
The input data will always be valid and in the format described. There is no need to check it explicitly.

Output
The output data should be printed on the console.
On the only output line write the number of words found.

Constraints
The number of the given letters will be between 1 and 10, inclusive.
All given letters will be small Latin letters (‘a’ – ‘z’)
Allowed working time for your program: 0.35 seconds. Allowed memory: 32 MB.

Examples


*/

using System;
using System.Collections.Generic;
using System.Linq;

class FeaturingWithGrisko
{
    static void Main()
    {
        string inputStr = Console.ReadLine();
        HashSet<string> allWords = new HashSet<string>();
        GenerateAllWords(inputStr, allWords);
        Console.WriteLine(allWords.Count);
    }

    static void GenerateAllWords(string input, HashSet<string> result)
    {
        var q = input.Select(x => x.ToString());
        int size = input.Length;
        for (int i = 0; i < size - 1; i++)
            q = q.SelectMany(x => input, (x, y) => x + y);

        foreach (var item in q)
        {
            //if (!HasRepeatingLetters(item))
            //{
            //    if (HasUsedCorrectNumberOfLetters(item, input))
            //    {                    
            //            result.Add(item);                    
            //    }
            //}
            if (EvaluatesGood(item, input))
            {
                result.Add(item);
            }
        }
    }

    private static bool HasUsedCorrectNumberOfLetters(string item, string pattern)
    {
        foreach (var letter in pattern)
        {
            if (item.Count(x => x == letter) != pattern.Count(x => x == letter))
            {
                return false;
            }
        }
        return true;
    }

    private static bool HasRepeatingLetters(string str)
    {
        char previous = str[0];
        for (int i = 1; i < str.Length; i++)
        {
            if (str[i] == previous)
            {
                return true;
            }
            previous = str[i];
        }
        return false;
    }

    private static bool EvaluatesGood(string str, string pattern)
    {
        foreach (var letter in pattern)
        {
            if (str.Count(x => x == letter) != pattern.Count(x => x == letter))
            {
                return false;
            }
        }
        char previous = str[0];
        for (int i = 1; i < str.Length; i++)
        {
            if (str[i] == previous)
            {
                return false;
            }
            previous = str[i];
        }
        return true;
    }
}